from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.handlers.callbacks import DebtorAddState, DebtorAddLoanState, DebtorRemoveLoanState
from bot.keyboards import confirm_debtor_fullname_kb, remove_loan_confirm_kb
from bot.utils.db import add_debtor
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, DialogCalendar, DialogCalendarCallback, \
    get_user_locale

from bot.utils.utils import get_current_add_loan_state_data

router = Router(name="state-router")


@router.message(DebtorAddState.waiting_for_fullname, F.text)
async def debtor_add_state_wating_for_fullanme(message: Message, state: FSMContext, session: AsyncSession):
    full_name = message.text.strip()

    if not full_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û –¥–æ–ª–∂–Ω–∏–∫–∞. –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        return

    if len(full_name) > 100:
        await message.answer("–î–ª–∏–Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(fullname=full_name)
    await message.answer(text=f"–í—ã –≤–≤–µ–ª–∏: {full_name}. –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=confirm_debtor_fullname_kb())



@router.message(DebtorAddLoanState.enter_amount, F.text)
async def debtor_add_loan_enter_amount(message: Message, state: FSMContext):
    amount = message.text.strip()

    if not amount.isdigit():
        await message.answer("–£–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.\n\n<b>–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–æ–ª–≥–∞:</b> ")
        return

    if len(amount) > 9:  
        await message.answer("–†–∞–∑–º–µ—Ä –¥–æ–ª–≥–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    await state.update_data(amount=amount)
    state_data = await state.get_data()
    await message.answer(f"{get_current_add_loan_state_data(state_data)}\n\n<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–æ–ª–≥–∞:</b> ")
    await state.set_state(DebtorAddLoanState.enter_subject)



@router.message(DebtorAddLoanState.enter_subject, F.text)
async def debtor_add_loan_enter_amount(message: Message, state: FSMContext):
    subject = message.text.strip()
    if not subject:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–æ–ª–≥–∞: ")
        return

    if len(subject) > 100:
        await message.answer("–î–ª–∏–Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(subject=subject)
    state_data = await state.get_data()
    await message.answer(f"{get_current_add_loan_state_data(state_data)}\n\n<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–º–∞: </b> ",
                         reply_markup=await SimpleCalendar(locale=await get_user_locale(message.from_user)).start_calendar())
    await state.set_state(DebtorAddLoanState.enter_date_of_loan)


@router.message(DebtorRemoveLoanState.enter_remove_amount, F.text)
async def debtor_remove_loan_enter_amount(message: Message, state: FSMContext):
    current_state = await state.get_state()
    remove_number = message.text.strip()
    if current_state == DebtorRemoveLoanState.enter_remove_amount:
        if not remove_number.isdigit():
            await message.answer("–£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –≤–µ—Ä–Ω—É–ª–∏: ")
            return

        if len(remove_number) > 9:
          await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ. –í–∞–º –Ω–µ –º–æ–≥—É—Ç —Å—Ç–æ–ª—å–∫–æ –∑–∞–¥–æ–ª–∂–∞—Ç—åü§®")
          return

        await state.update_data(amount_to_subtract=remove_number)
        await message.answer(text=f"–í–∞–º –≤–µ—Ä–Ω—É–ª–∏ <b>{remove_number}</b>. –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
                             reply_markup=remove_loan_confirm_kb())
        await state.set_state(DebtorRemoveLoanState.confirm_remove_amount)

